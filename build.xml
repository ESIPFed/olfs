<?xml version="1.0"?>

<!--
/////////////////////////////////////////////////////////////////////////////
// This file is part of the "Hyrax" project, a Java implementation
// of the OPeNDAP Data Access Protocol.
//
// Copyright (c) 2008 OPeNDAP, Inc.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// You can contact OPeNDAP, Inc. at PO Box 112, Saunderstown, RI. 02874-0112.
/////////////////////////////////////////////////////////////////////////////
-->


<!DOCTYPE project [
        <!ENTITY globalprops      SYSTEM "./buildfiles/globalprops.xml">
        ]>

<!-- Build file for OPeNDAP core software -->


<project
        name="OPeNDAP Lightweight Front end Server (OLFS), part of the Hyrax project"
        default="all" basedir=".">

    <!-- Global Properties -->
    &globalprops;

    <!-- Project directories -->
    <property name="src.dir" location="src"/>
    <property name="doc.dir" location="doc"/>
    <property name="lib.dir" location="lib"/>
    <property name="resources.dir" location="resources"/>
    <property name="schema.dir" location="schema"/>
    <property name="buildfiles.dir" location="buildfiles"/>
    <property name="initialContent.dir"
              location="${resources.dir}/initialContent"/>
    <property name="WebInfResources.dir"
              location="${resources.dir}/WEB-INF"/>
    <property name="distributionResources.dir"
              location="${resources.dir}/distribution"/>

    <property name="THREDDSResources.dir"
              location="${resources.dir}/THREDDS"/>


    <!-- Build Directories -->
    <property name="build.dir" location="build"/>
    <property name="build.classes" location="${build.dir}/classes"/>
    <property name="build.doc" location="${build.dir}/doc"/>
    <property name="build.dist" location="${build.dir}/dist"/>
    <property name="build.lib" location="${build.dir}/lib"/>


    <!-- Libraries -->
    <property name="junit.lib" value="junit-4.4.jar"/>
    <property name="jdom.lib" value="jdom-1.0.jar"/>
    <property name="servlet.lib" value="tomcat-5.5.0-servlet.jar"/>
    <property name="echo.lib" value="echosoap.jar"/>


    <property name="thredds.lib" value="tsf-3.16.22.jar"/>
    <property name="netcdf.lib" value="netcdf-2.2.20.jar"/>
    <property name="nlog4j.lib" value="nlog4j-1.2.21.jar"/>

    <property name="commons-cli.lib" value="apache-commons-cli-1.0.jar"/>
    <property name="commons-httpclient.lib" value="apache-commons-httpclient-3.1.jar"/>
    <property name="commons-logging.lib" value="apache-commons-logging-1.1.1.jar"/>

    <property name="xercesImpl.lib" value="xercesImpl-2.8.1.jar"/>
    <property name="xercesXmlApis.lib" value="xml-apis-2.8.1.jar"/>





    <available classname="com.fortify.dev.ant.SourceanalyzerTask"
               property="fortify.present"/>

    <property name="sourceanalyzer.buildid" value="FortifyBuild"/>
    <property name="rules.dir" value="fortify"/>


    <!-- Library (class)paths -->
    <path id="olfs.compile.classpath">
        <pathelement path="${build.classes}"/>
        <fileset dir="${lib.dir}">
            <include name="${servlet.lib}"/>
            <include name="${jdom.lib}"/>
            <include name="${junit.lib}"/>
            <include name="${commons-cli.lib}"/>
            <include name="${commons-httpclient.lib}"/>
            <include name="${commons-logging.lib}"/>
            <include name="${thredds.lib}"/>
            <include name="${netcdf.lib}"/>
            <include name="${nlog4j.lib}"/>
        </fileset>
    </path>


    <target name="all" depends="clean,clients,check,server,soap-lib"
            description="Builds lots of stuff."/>


    <target name="clients" depends="BESclient"
            description="Compiles the clients."/>


    <target name="clean" description="Clean up ALL build products.">
        <delete dir="${build.dir}"/>
    </target>


    <target name="init" description="Prepare all build directories.">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.doc}"/>
        <mkdir dir="${build.dist}"/>
        <mkdir dir="${build.lib}"/>

        <tstamp/>
        <echo level="info" message="time: ${TSTAMP}"/>
    </target>



    <target name="check"
            description="Run Unit Tests"
            depends="compile"
            >

        <junit  showoutput="yes"
                haltonfailure="yes"
                printsummary="yes"
                >

          <formatter type="plain" usefile="false"/>
          <classpath refid="olfs.compile.classpath"/>

          <test name="opendap.coreServlet.Scrub" />

        </junit>
    </target>




    <target
            name="compile"
            depends="init"
            description="Compiles the OLFS."
            >
        <echo level="info" message="AntFile: ${ant.file} Compiling OLFS"/>
        <echo level="info"
              message="Using the ${build.compiler} javac compiler"/>
        <echo level="info" message=""/>
        <javac compiler="${build.compiler}"
               destdir="${build.classes}"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}">

            <classpath refid="olfs.compile.classpath"/>

            <src path="${src.dir}"/>
            <include name="opendap/**/*.java"/>
            <exclude name="opendap/experiments/**/*.java"/>

        </javac>

    </target>



    <target
            name="olfs-experiments"
            depends="init"
            description="Compiles the OLFS."
            >
        <echo level="info" message="AntFile: ${ant.file} Compiling OLFS"/>
        <echo level="info"
              message="Using the ${build.compiler} javac compiler"/>
        <echo level="info" message=""/>
        <javac compiler="${build.compiler}"
               destdir="${build.classes}"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}">

            <classpath refid="olfs.compile.classpath"/>

            <src path="${src.dir}"/>
            <include name="opendap/**/*.java"/>
            <include name="hao/**/*.java"/>

        </javac>

    </target>










    <target name="olfs-lib" depends="clean,compile">
        <jar destfile="${build.lib}/olfs-${VERSION}.jar">
            <fileset dir="${build.classes}">
                <exclude name="hao/**/*.class"/>
            </fileset>
        </jar>

    </target>


    <target name="soap-lib" depends="clean,compile">
        <jar destfile="${build.lib}/opendap-soap-${VERSION}.jar">
            <fileset dir="${build.classes}">
                <include name="opendap/soap/**/*.class"/>
            </fileset>
        </jar>

    </target>


    <target
            name="doc"
            depends="init,clean,IsJavaDocUpToDate"
            description="Builds JavaDoc for the Serve4 software packages, if missing or out of date."
            unless="JavaDocIsUpToDate"
            >

        <javadoc destdir="${build.doc}/javadoc"
                 Author="true"
                 Verbose="true"
                 Version="true"
                 failonerror="true"
                >
            <classpath refid="olfs.compile.classpath"/>

            <packageset dir="${src.dir}" defaultexcludes="yes" />

        </javadoc>

        <copy todir="${build.doc}">
            <fileset dir="${doc.dir}">
                <exclude name="javadoc/**"/>
                <!-- Exclude the javadoc directory in the ${doc.dir} dir -->
                <exclude name="_notes/**"/>
                <!-- Exclude the _notes directory in the ${doc.dir} dir -->
            </fileset>
        </copy>
    </target>


    <target
            name="doc-dist"
            depends="clean,doc"
            description="Builds documentation distribution"
            >

        <jar destfile="${build.dist}/olfs-${VERSION}-doc.jar">
            <zipfileset dir="${build.doc}" prefix="olfs-${VERSION}-doc"/>
        </jar>

    </target>


    <target
            name="src-dist"
            depends="clean,init"
            description="Builds source distribution"
            >

        <jar destfile="${build.dist}/olfs-${VERSION}-src.jar"
                >

            <zipfileset dir="." prefix="olfs-${VERSION}-src">
                <exclude name="build/**"/>
                <exclude name="doc/javadoc/**"/>
                <!-- Exclude the javadoc directory in the ${doc.dir} dir -->
                <exclude name="doc/_notes/**"/>
                <!-- Exclude the _notes directory in the ${doc.dir} dir -->
                <exclude name="**/*.iml"/>
                <exclude name="**/*.ipr"/>
                <exclude name="**/*.iws"/>
            </zipfileset>

        </jar>

    </target>

    <target
            name="server-dist"
            depends="server"
            description="Packages the war file into tar file with a release related name.">

        <copy file="${distributionResources.dir}/WarFileReadme"
              tofile="${build.dist}/README"/>

        <jar destfile="${build.dist}/olfs-${VERSION}-webapp.jar">
            <zipfileset dir="${build.dist}" prefix="olfs-${VERSION}-webapp">
                <include name="opendap.war"/>
                <include name="README"/>
            </zipfileset>

        </jar>

        <delete file="${build.dist}/README"/>
        <delete file="${build.dist}/opendap.war"/>

    </target>


    <target
            name="DISTRO"
            depends="clean,src-dist,doc-dist,server-dist,check"
            description="Builds complete distribution"
            >

    </target>


    <target
            name="IsJavaDocUpToDate"
            description="Checks to see if the JavaDoc is out of date."
            >
        <uptodate property="JavaDocIsUpToDate"
                  targetfile="${build.doc}/opendap/index.html">
            <srcfiles dir="${src.dir}">
                <include name="opendap/**/*.java"/>
            </srcfiles>
        </uptodate>

    </target>


    <target
            name="BESclient"
            depends="olfs-lib"
            description="Build and package the back end client."
            >

        <copy file="${lib.dir}/${commons-cli.lib}" tofile="${build.dist}/${commons-cli.lib}"/>

        <jar destfile="${build.dist}/beclient.jar"
             manifest="resources/META-INF/BESclient.MANIFEST.MF">
            <fileset dir="${build.classes}">
                <include name="opendap/ppt/**/*.class"/>
                <include name="hao/**/*.class"/>
            </fileset>
        </jar>


    </target>


    <target
            name="server"
            depends="olfs-lib,doc"
            description="Performs a clean build of the core software and assembles the WAR file."
            >


        <war destfile="${build.dist}/opendap.war"
             webxml="${WebInfResources.dir}/web.xml"
                >

            <lib dir="${lib.dir}">
                <include name="${jdom.lib}"/>
                <include name="${junit.lib}"/>
                <include name="${thredds.lib}"/>
                <include name="${netcdf.lib}"/>
                <include name="${nlog4j.lib}"/>
                <include name="${commons-cli.lib}"/>
                <include name="${commons-httpclient.lib}"/>
                <include name="${commons-logging.lib}"/>
                <include name="${xercesImpl.lib}"/>
                <include name="${xercesXmlApis.lib}"/>
            </lib>
            <classes dir="${build.classes}"/>


            <zipfileset dir="${build.doc}" prefix="docs">
                <exclude name="src.distribution.readme"/>
                <exclude name="_notes"/>
            </zipfileset>

            <zipfileset dir="${THREDDSResources.dir}/views" prefix="views"/>

            <zipfileset dir="${schema.dir}" prefix="schema"/>

            <zipfileset dir="${build.doc}/javadoc" prefix="javadocs/olfs"/>


            <zipfileset dir="${lib.dir}" prefix="olfs-libraries">
                <include name="${jdom.lib}"/>
                <include name="${junit.lib}"/>
                <include name="${thredds.lib}"/>
                <include name="${netcdf.lib}"/>
                <include name="${nlog4j.lib}"/>
                <include name="${commons-cli.lib}"/>
                <include name="${commons-httpclient.lib}"/>
                <include name="${commons-logging.lib}"/>
                <include name="${xercesImpl.lib}"/>
                <include name="${xercesXmlApis.lib}"/>
            </zipfileset>

            <zipfileset dir="${initialContent.dir}" prefix="initialContent">
                <include name="**/*"/>
            </zipfileset>

            <webinf dir="${WebInfResources.dir}">
                <include name="log4j.xml"/>
            </webinf>


        </war>

        <delete file="${build.dist}/index.html"/>

    </target>


    <target name="fortify" if="fortify.present">
        <typedef name="sourceanalyzer"
                 classname="com.fortify.dev.ant.SourceanalyzerTask"/>


        <!-- call clean to ensure that all source files are recompiled -->
        <antcall target="clean"/>



        <!-- call the compile target using the SCA Compiler Adapter to -->
        <!-- translate all source files -->
        <antcall target="compile">
            <param name="build.compiler"
                   value="com.fortify.dev.ant.SCACompiler"/>
        </antcall>


        <!-- capture all configuration files in the WEB-INF directory -->
        <echo>sourceanalyzer ${WebInfResources.dir}</echo>
        <sourceanalyzer buildid="${sourceanalyzer.buildid}" >
            <fileset dir="${WebInfResources.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </sourceanalyzer>



        <!-- run analysis -->
        <echo>sourceanalyzer scan</echo>
        <sourceanalyzer buildid="${sourceanalyzer.buildid}"
                        scan="true"
                        resultsfile="${build.dir}/issues.fpr"
                        rules="${rules.dir}/OlfsRulePack.xml"
                />
    </target>


    <target
            name="test"
            depends="clean,init"
            description="Performs a clean build of the Test thingy."
            >

        <echo level="info" message="AntFile: ${ant.file} Compiling test"/>
        <echo level="info"
              message="Using the ${build.compiler} javac compiler"/>
        <echo level="info" message=""/>
        <javac compiler="${build.compiler}"
               destdir="${build.classes}"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}">

            <classpath refid="olfs.compile.classpath"/>

            <src path="${src.dir}"/>
            <include name="opendap/experiments/**/*.java"/>

        </javac>



        <war destfile="${build.dist}/test.war"
             webxml="${WebInfResources.dir}/tesweb.xml"
                >

            <lib dir="${lib.dir}">
            </lib>
            <classes dir="${build.classes}"/>


            <webinf dir="${WebInfResources.dir}">
                <include name="log4j.xml"/>
            </webinf>


        </war>

        <delete file="${build.dist}/index.html"/>

    </target>



</project>










