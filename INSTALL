
Building and installing Server4, release 1.0

Note that releases 1.0 to 1.3 are alpha releases and assume that the builder
is familar with OPeNDAP software. Release 1.4 will be a beta release.

There are two different components to server4, each of which must be built
and installed to get a running server. See the README file for information
on the server architecture and roles of the two parts of the server.

Part I: Download, build, configure and test the BES

The BES software is sontained in Subversion in the project 'bes.' Get this 
using http://scm.opendap.org:8090/svn/trunk/bes. Once you have the software,
perform the usual autoreconf, configure, make and 'make install' steps to build
the code. This will install libraries needed by the server daemon.

To build the server daemon itself, check out the netcdf_handler project 
from subversion (http://scm.opendap.org:8090/svn/trunk/netcdf_handler). Again,
use autoreconf to generate the configure and Makefile.in files. However, when
you run configure, make sure to use the --with-bes option and pass that the
prefix of the bes software. Assuming you built the bes using the default prefix
configure should be run as './configure --with-bes=/usr/local'. The configure
script is not too smart about where to look for the bes libraries, and if it
cannot find them it won't build the bes server daemon. After running configure,
run make.

You should see two executables inteh netcdf_handler directory at this point,
one name dap_nc_handler and one name opendapserver. The latter is the bes
daemon (ignore the dap_nc_handler).

To run the daemon, you will need an configuration file. Look at the file 
named opendap.ini and edit its values to suit your system (note that as of
2/3/06 the bes only knows how to serve netCDF files). Most of the paths/values
in the sample file should be fine. Make sure 'Catalog.catalog.RootDirectory'
is the full path to the root of the data you want to serve.

To point the daemon at the configuration file, set the environment variable
DODS_INI to the full path of the file. 

To run the server, you need to specify a host name and port (the daemon's help
says it can use a Unix socket in addition to a TCP socket, but I've only
tested the TCP socket option). Run the server as:

	'./opendapserver -d -p 10002
	
You can use different values, but the OLFS is configured by default for these 
particular values. Note that -d puts the daemon in debugging mode and in that
mode it can handle only one client at a time. It also prints out a number of 
diagnostic messages.

Part Ib: Test the opendapserver daemon

Look in the directory bes/cmdln for the opendapserver test client. Run the
client using -p 10002 -h localhost. At the OPeNDAP> prompt, type 
'show version;' and you see stuff about different versions. To test the data
access, do the following:

	set container in catalog values fnoc1,/data/nc/fnoc1.nc;
	define data as fnoc1;
	get das for data;
	get dds for data;
	define time as fnoc1 with fnoc1.constraint="time";
	get dods for time;
	
The last operation will spit out binary junk. If that all works, you have a
running BES. Of course, you should substitute a nerCDF file on your system for
/data/nc/fnoc1.nc.

Part II: Setting up the OLFS

Exit the client (type 'exit' at the prompt).

Check out the software in Server4 using
http://scm.opendap.org:8090/svn/trunk/Server4. Change directory to Server4 and
build the code using 'ant -f buildfiles/s4.xml server' I used ant version 1.6.2
with Java 1.5.0_04. I had to edit the shell script 'ant' and replace '-cp' with
'-lib'. This is a know issue with these two versions.

To run the OLFS, use Tomcat version 4.1. The code has not been tested with 
version 5 yet. First set teh environment variable CATALINA_HOME to the full
path to Tomcat (e.g., export CATALINA_HOME=/usr/local/jakarta-tomcat-4.1.31
in bash). In the top level tomcat directory (jakarta-tomcat-4.1.31 on
my machine) run 'bin/startup.sh; tail -f logs/catalina.out'. Wait a few seconds
while it all starts up.

To test/use the server, go to a browser and type

	http://localhost:8080/

and you should see the Tomcat default page. Type

	http://localhost:8080/opendap/s4/data/nc/fnoc1.nc.das

To see the DAS for fnoc1.nc (agian, adjust for you data). You can probably 
get a THREDDS catalog by using

 	http://localhost:8080/opendap/s4/catalog.xml
 	http://localhost:8080/opendap/s4/data/catalog.xml
 	http://localhost:8080/opendap/s4/data/nc/catalog.xml
 	
Et cetera.

	

NB: If you ctrl-c to stop the server, make sure to run bin/shutdown.sh to 
clean things up in/with Tomcat. If you don't, you may get errors when you next
try to start the Tomcat server.


