package opendap.wcs.v1_1_2;


import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.Document;

import java.util.Iterator;


import opendap.coreServlet.Scrub;

/**
 * Process GetCoverage requests. Static methods are used to construct a wcs:Coverages
 * response.
 *
 */
public class CoverageRequestProcessor {


    /**
     * This method is the primary entry point for handling a wcs:GetCoverage request.
     *
     *
     * @param req The GetCoverageRequest object built fromt the client request.
     * @param urlBase The base URL of the data service.
     * @return The wcs:Coverages document generated by the request
     * @throws WcsException When a wcs:Coverages response document cannot be
     * constructed for the passed request.
     */
    public static Document processCoverageRequest(GetCoverageRequest req, String urlBase) throws WcsException {


        String id = req.getCoverageID();

        boolean b = CatalogWrapper.hasCoverage(id);

        if(!b)
            throw new WcsException("No such wcs:Coverage: "+ Scrub.fileName(id),
                    WcsException.INVALID_PARAMETER_VALUE,"wcs:Identifier");


        String dataAccessURL = getNetcdfDataAccessURL(req,urlBase);
        String metadataAccessURL = getMetadataAccessURL(req,urlBase);




        Coverage cvg = new Coverage(id,dataAccessURL, metadataAccessURL);


        Element coverage = cvg.getCoverageElement();

        Element coverages = new Element("Coverages",WCS.WCS_NS);

        coverages.addContent(coverage);

        Iterator i = coverage.getAdditionalNamespaces().iterator();
        while(i.hasNext())
            coverages.addNamespaceDeclaration((Namespace) i.next());

        Document doc = new Document(coverages);


        return doc;



    }




    public static String getDapDataAccessURL(GetCoverageRequest req, String urlBase) throws WcsException {

        String requestURL = urlBase;


        if( !req.getCoverageID().startsWith("/") )
            requestURL += "/";

        requestURL += req.getCoverageID() + ".dods"+"?"+getDapProjection(req);

        return requestURL;
    }



    public static String getNetcdfDataAccessURL(GetCoverageRequest req, String urlBase) throws WcsException {

        String requestURL = urlBase;

        if( !req.getCoverageID().startsWith("/") )
            requestURL += "/";

        requestURL +=  req.getCoverageID() + ".nc"+"?"+getDapProjection(req);

        return requestURL;
    }



    public static String getMetadataAccessURL(GetCoverageRequest req, String urlBase) throws WcsException {

        String requestURL = urlBase;

        if( !req.getCoverageID().startsWith("/") )
            requestURL += "/";
        
        requestURL +=   req.getCoverageID() + ".ddx";
        //requestURL +=  "/" + req.getCoverageID() + ".ddx"+"?"+getDapProjection(req);

        return requestURL;
    }



    private static String getDapProjection(GetCoverageRequest req) throws WcsException {

        String proj=null;

        RangeSubset rs = req.getRangeSubset();
        String coverageID = req.getCoverageID();
        String fieldID;
        BoundingBox subsetBB = req.getBbox();
        GridCRS reqCRS = req.getGridCRS();

        CoverageDescription coverage = CatalogWrapper.getCoverageDescription(coverageID);
        BoundingBox coverageBB = coverage.getBoundingBox();
        //GridCRS coverageCRS = coverage.getGridCRS();


        if(!subsetBB.interesects(coverageBB))
            throw new WcsException("Requested BoundingBox does not intersect Coverage data.",
                    WcsException.INVALID_PARAMETER_VALUE,"ows:BoundingBox");



        //@todo work out how to deal with GridCRS objects.
        //@todo compare request GridCRS (if there is one) to target coverage GridCRS.
        // @todo Do transformation if required

        if(reqCRS!=null){
            throw new WcsException("Request contains a GridCRS. Since this " +
                    "server does not currently support coordinate transforms the" +
                    "request is denied. You may request the coverage data in " +
                    "its native CRS by simply omitting a GridCRS component from" +
                    "the request. See 'OGC 07-067r5' Table 24 footnote d.",
                    WcsException.INVALID_PARAMETER_VALUE,"wcs:GridCRS");
        }

        if(rs!=null){
            RangeSubset.FieldSubset[] fields = req.getRangeSubset().getFieldSubsets();
            for(RangeSubset.FieldSubset fs :fields){

                fieldID = fs.getID();
                if(!CatalogWrapper.getCoverageDescription(coverageID).hasField(fieldID))
                    throw new WcsException("No such wcs:Field: "+ Scrub.fileName(fieldID),
                            WcsException.INVALID_PARAMETER_VALUE,"ows:Identifier");






                if(proj!=null)
                    proj += ",";
                if(proj==null)
                    proj = "";
                proj += "geogrid("+fs.getID()+","+subsetBB.getDapGeoGridFunctionBoundingBox() +")";


                //##########
                break; //@todo REMOVE THIS (break;) LINE TO ENABLE MULTIPLE FIELDS IN A RESPONSE
                //###########
            }
        }
        return proj==null?"":proj;
    }









}
